stages:
  - test
  - build
  - deploy

variables:
  IMAGE_TAG: "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHA"
  SSH_PORT: "22"

test:
  stage: test
  image: golang:1.21
  script:
    - cd mygoapp
    - go mod tidy
    - go test ./...
  tags:
    - linux-runner
  artifacts:
    when: always
    expire_in: 1 hour

build:
  stage: build
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  before_script:
    - echo "$CI_JOB_TOKEN" | docker login -u "$CI_REGISTRY_USER" --password-stdin "$CI_REGISTRY"
  script:
    - cd mygoapp
    - docker build -t "$IMAGE_TAG" .
    - docker push "$IMAGE_TAG"
  tags:
    - linux-runner
  artifacts:
    expire_in: 1 hour


deploy:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client yq
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh-keyscan -p "$SSH_PORT" "$SSH_HOST" >> ~/.ssh/known_hosts
  script:
    - scp -P "$SSH_PORT" -r mygoapp/deploy/* "$SSH_USER@$SSH_HOST:/opt/mygoapp/"
    - |
      ssh -p "$SSH_PORT" "$SSH_USER@$SSH_HOST" "
        set -e
        cd /opt/mygoapp/
        echo \"$CI_JOB_TOKEN\" | docker login \"$CI_REGISTRY\" -u \"$CI_REGISTRY_USER\" --password-stdin
        yq -i '.services.app.image = \"$IMAGE_TAG\"' docker-compose.yaml
        docker compose up -d --remove-orphans
      "
  tags:
    - linux-runner
  environment:
    name: production
    url: http://$SSH_HOST
  only:
    - main
